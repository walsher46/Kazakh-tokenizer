# -*- coding: utf-8 -*-
"""Segmentation_qaz_jurnaks_CHANKS

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kUfEZuWTrGC42Wa2_cptEwatlhWVR5Ha
"""

# Commented out IPython magic to ensure Python compatibility.
from google.colab import drive
drive.mount('/content/drive')
curr_dir =  "/content/drive/MyDrive/SEGMENTATION_QAZ"
# %cd "$curr_dir"

pip install xlwt

!pip install sacrebleu



import re
import os
import xlrd, xlwt
import sacrebleu
import numpy as np
import openpyxl
import time
from tqdm import tqdm

def splitting_by_words(text):
    result = re.findall(r'\w+|[^\w\s]', text)
    print('text', result)
    return result
global jurnaqs
jurnaqs = []
ending_segs = []
def sorting_endings(endings_file_name):
    endings_wb = xlrd.open_workbook(endings_file_name)
    endings_sh = endings_wb.sheet_by_index(0)
    endings = []
    ending_segs = []
    for rownum in range(endings_sh.nrows-1):
        ending = endings_sh.cell(rownum+1,0).value
        if '\ufeff' in ending:
            ending = ending.replace('\ufeff', '')
        endings.append(ending)
    #print('''ENDINGS''')
    #print(endings)
    for rownum in range(endings_sh.nrows-1):
        ending_seg1 = endings_sh.cell(rownum+1,1).value
        if '\ufeff' in ending:
            ending_seg1 = ending.replace('\ufeff', '')
        ending_segs.append(ending_seg1)

    return [endings, ending_segs]


def sorting_jurnaqs(jurnaqs_file_name):
    jurnaqs_wb = xlrd.open_workbook(jurnaqs_file_name)
    jurnaqs_sh = jurnaqs_wb.sheet_by_index(0)
    jurnaqs = []
    for rownum in range(jurnaqs_sh.nrows-1):
        jurnaq = jurnaqs_sh.cell(rownum+1,0).value
        if '\ufeff' in jurnaq:
            jurnaq = jurnaq.replace('\ufeff', '')
        jurnaqs.append(jurnaq)

    return jurnaqs

def fjurnaq_stem(word):
    rez_stem = ''
    jurnaq_stem = ''
    word_len = len(word)
    min_len_of_stem = 2
    word_len = len(word)
    if word_len > min_len_of_stem:

        n = word_len - min_len_of_stem
        i = 1  # –ù–∞—á–∏–Ω–∞–µ–º —Å 1, –µ—Å–ª–∏ –∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞—Ç—å —Å –∫–æ–Ω—Ü–∞ —Å–ª–æ–≤–∞
        maxlenjurnaq = 4  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å—É—Ñ—Ñ–∏–∫—Å–∞ (–∂—É—Ä–Ω–∞–∫–∞)

        while i <= len(word) and i <= maxlenjurnaq:
            word_ending = word[-i:]  # –ü–æ–ª—É—á–∞–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏–µ –¥–ª–∏–Ω–æ–π i
            #print('jurnaq', word_ending)
            stem = word[:-i]  # –û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å —Å–ª–æ–≤–∞ –±–µ–∑ –æ–∫–æ–Ω—á–∞–Ω–∏—è
            #print('stem', stem)

            for jurnaq in jurnaqs:
                if word_ending == jurnaq:
                    if stem.lower() in stems_list:
                        rez_stem = stem
                        jurnaq_stem = word_ending
                        #print('stem', rez_stem)
                        #print('jurnaq0', jurnaq_stem, stem)
                        return rez_stem, jurnaq_stem

            i += 1  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º i –Ω–∞ –∫–∞–∂–¥–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
    else:
        rez_stem = word
        jurnaq_stem = ''
    #print('stem', rez_stem)
    #print('jurnaq1', jurnaq_stem, rez_stem)
    return rez_stem, jurnaq_stem


def ending_stem(word):
    word_len = len(word)
    min_len_of_word = 2
    rez_stem = ''
    rez_ending = ''
    if word_len > min_len_of_word:
        n = word_len - min_len_of_word
        if word.lower() in stems_list:
            rez_stem = word
            rez_ending = ''
            #print('stem 0', rez_stem)
            #print('ending 0', rez_ending)

            return rez_stem, rez_ending

        else:
            i = n+1
            while i > 0:
                word_ending = word[word_len - (i-1):]
                stem = word[:word_len-len(word_ending)]
                #print('stem', stem)
                #print('ending', word_ending)
                for ending in endings:
                    if word_ending == ending:
                        if stem.lower() in stems_list:
                            rez_stem = stem
                            rez_ending = word_ending
                            #print('stem 2', rez_stem)
                            #print('ending 2', rez_ending)
                            i = 0
                            break

                #print('stem 1', stem)

                rez_stem = stem
                i = i-1
    else:
        rez_stem = word
        rez_ending = ''
    return rez_stem, rez_ending


global endings_seg

def segment_word(word, endings):
    jurnaqs_seg = []
    ending_text = {}
    ending_seg_dic = {}
    endingseg = ''
    endingseg_1 = ''
    #print('word', word)
    stemm, ending = ending_stem(word)                 # –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–µ–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ª–æ–≤–∞ –Ω–∞ —Å—Ç–µ–º –∏ –æ–∫–æ–Ω—á–∞–Ω–∏–µ
    #print('stem', stemm)
    #print('ending', ending)
    stemm_len = len(stemm)

    if ending != '':
        num_ending = endings.index(ending)           # –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –∏–Ω–¥–µ–∫—Å –æ–∫–æ–Ω—á–∞–Ω–∏–µ
            #print(num_ending)
        endingseg = endings_seg[num_ending]          # –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Å–µ–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–∫–æ–Ω—á–∞–Ω–∏–µ
    else:
        endingseg = ''
            #endingseg = "@@ ".join([stemm, endingseg])
            #ending_seg_dic.update({word: endingseg})
        #print('stemm1' ,stemm)                                                  # –°–ï–ì–ú–ï–ù–¢–ò–†–û–í–ê–ù–ò–ï –°–¢–ï–ú–ê –ü–û –ñ–£–†–ù–ê–ö–ê–ú
    stemm_len = len(stemm)
    min_len_of_stem = 2
    jurnaqs_seg = ''
    if stemm_len > min_len_of_stem:
        n = stemm_len - min_len_of_stem
        i = 1
        while i <= n:
            #print('stemm2', stemm)                                      # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–µ–º–∞ —Å–ø—Ä–∞–≤–∞
            rez_stem, jurnaq = fjurnaq_stem(stemm)       #  –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –∂—É—Ä–Ω–∞–∫–∞ —Å–ø—Ä–∞–≤–∞
            #print('jurnaq_stem', jurnaq)
            if jurnaq == '':
                break
                #jurnaqs_seg.append(jurnaq_stem)

            if jurnaqs_seg != '':
                                   # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –Ω–µ –ø—É—Å—Ç, —Å–æ–µ–¥–∏–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç —Å —Ç–µ–∫—É—â–∏–º –∂—É—Ä–Ω–∞–∫–æ–º —á–µ—Ä–µ–∑ @@
                if jurnaq != '':
                        updated_seg = f"{jurnaq}@@ {jurnaqs_seg}"
            else:
                                    # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç, –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∂—É—Ä–Ω–∞–∫
                updated_seg = jurnaq

                                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
            jurnaqs_seg = updated_seg
                #print(jurnaqs_seg)
            stemm = rez_stem                             #  –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–µ–º–∞, –∑–∞ —Å—á–µ—Ç —Å–µ–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∂—É—Ä–Ω–∞–∫–∞(–æ–≤)
            i = i + len(jurnaq)
            #print('jurnaq_seg', jurnaqs_seg)


        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç—Ä–æ–∫—É: –°—Ç–µ–º + –∂—É—Ä–Ω–∞–∫–∏ + –æ–∫–æ–Ω—á–∞–Ω–∏—è
    #print('stemm', stemm)
    #print('endingseg', endingseg)
    #print('jurnaqs_seg', jurnaqs_seg)
    if endingseg != '' and jurnaqs_seg != '':
        final_seg = f"{stemm}@@ {jurnaqs_seg}{endingseg}"
        #print('final_seg1', final_seg)
    elif endingseg != '' and jurnaqs_seg == '':
        final_seg = f"{stemm}@@ {endingseg}"
        #print('final_seg2', final_seg)
    elif endingseg == '' and jurnaqs_seg != '':
        final_seg = f"{stemm}@@ {jurnaqs_seg}"
        #print('final_seg3', final_seg)
    else:
        final_seg = f"{stemm}"
        #print('final_seg4', final_seg)


    return final_seg

def morpho_segment(text):
    tokens = re.findall(r'\w+|[^\w\s]', text)  # –°–ª–æ–≤–∞ + –ø—É–Ω–∫—Ç—É–∞—Ü–∏—è
    processed_tokens = []
    for token in tokens:
        if token.lower() in stop_words:
            processed_tokens.append(token)  # –û—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–æ–ø-—Å–ª–æ–≤–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        elif token.isalpha():
            #print('token', token)
            processed_tokens.append(segment_word(token, endings))  # –°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è —Å–ª–æ–≤
        else:
            processed_tokens.append(token)  # –û—Å—Ç–∞–≤–ª—è–µ–º —á–∏—Å–ª–∞ –∏ –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è

    return " ".join(processed_tokens)

stopwords_file_name = "stop_words.txt"
stems_file_name = "qaz_stems_unik_edit.xlsx"
jurnaqs_file_name = "qaz_jurnaks.xls"
endings_file_name = "qaz_endings_seg.xls"
endings_seg = []
endings, endings_seg = sorting_endings(endings_file_name)
jurnaqs = sorting_jurnaqs(jurnaqs_file_name)

        #------INPUT STEM FILE
stems_wb = openpyxl.load_workbook(stems_file_name)
stems_sh = stems_wb.active
stems = []
global stems_list
for row in stems_sh.rows:
    stem = row[0].value
    if '\ufeff' in stem:
        stem = stem.replace('\ufeff', '')
    stems.append(stem)
stems_list = sorted(stems, key=len, reverse=True)

         #-----INPUT STOPWORD FILE
with open(stopwords_file_name, "r", encoding="utf-8") as f:
    stopwords_file = f.readlines()
    stop_words = []
    for stop_word in stopwords_file:
        if "\n" in stop_word:
            stop_word = stop_word.replace("\n", "")
        stop_words.append(stop_word)
    #print(stop_words)


input_path = "kaz_285000_only.txt"
output_dir = "segmented_kaz_285_only"
chunk_size = 5000


# –ß–∏—Ç–∞–µ–º —Å—Ç—Ä–æ–∫–∏
with open(input_path, "r", encoding="utf-8") as f:
    lines = [line.strip() for line in f if line.strip()]

os.makedirs(output_dir, exist_ok=True)

n_chunks = (len(lines) + chunk_size - 1) // chunk_size
print(f"üìÑ –í—Å–µ–≥–æ —á–∞–Ω–∫–æ–≤: {n_chunks}")
                  #------ END INPUT TEXT FILE AND CHANKING

for i in tqdm(range(n_chunks), desc="‚è≥ –°–µ–≥–º–µ–Ω—Ç–∏—Ä—É—é"):
    # –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ —á–∞–Ω–∫–∞
    output_path = os.path.join(output_dir, f"chunk_{i:03d}.txt")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º: –µ—Å–ª–∏ —Ñ–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
    if os.path.exists(output_path):
        print(f"‚ö° –ß–∞–Ω–∫ {i} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...")
        continue

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω—É–∂–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
    chunk_lines = lines[i * chunk_size: (i + 1) * chunk_size]

    start_time = time.time()  # –ó–∞—Å–µ–∫–∞–µ–º –≤—Ä–µ–º—è

    # –°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è
    segmented = [morpho_segment(line) for line in chunk_lines]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    with open(output_path, "w", encoding="utf-8") as f_out:
        for line in segmented:
            f_out.write(line + "\n")

    # –õ–æ–≥–≥–∏—Ä—É–µ–º –≤—Ä–µ–º—è
    duration = time.time() - start_time
    print(f"‚úÖ –ß–∞–Ω–∫ {i} –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∑–∞ {duration:.2f} —Å–µ–∫")
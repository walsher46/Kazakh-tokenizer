{"question": "Python қандай жоғары деңгейлі тіл болып саналады?", "answer": "Python жоғары деңгейлі тіл ретінде ашық бастапқы коды бар көп мақсатты бағдарламалау тілі."},
{"question": "Python қай технология саласында тиімді?", "answer": "Python технология саласында қарапайым және жылдам болғандықтан тиімді."},
{"question": "Python-ның оқылуы қасиеті қандай?", "answer": "Python-ның оқылуы қасиеті автоматтандыру және скрипт жазуға ыңғайлы платформа түрде сипатталады."},
{"question": "Python қай ғылым саласында тиімді?", "answer": "Python ғылым саласında қарапайым және жылдам болғандықтан тиімді."},
{"question": "Python қандай интерпретирленетін тіл болып саналады?", "answer": "Python интерпретирленетін тіл ретінде оқуға және жазуға жеңіл синтаксисі бар тіл."},
{"question": "Python-дың кітапханалары дегеніміз не?", "answer": "Python-дың кітапханалары - деректер талдау мен машиналық оқытуға арналған танымал тіл."},
{"question": "Python-ды Linux жүйесіне орнату қандай?", "answer": "Python-ды Ubuntu жүйесіне терминал командалары арқылы орнатады."},
{"question": "Python-ды орнату үшін Anaconda не үшін қажет?", "answer": "Python-ды орнату үшін pip қосымша кітапханаларды басқару үшін қажет."},
{"question": "IDLE-ді таңдаудың артықшылығы не?", "answer": "IDLE-ді таңдаудың мақсаты қарапайымдылығы және қолжетімділігі болып табылады."},
{"question": "Python-ды орнату үшін нұсқаулық қайдан алады?", "answer": "Python-ды орнату үшін документация жергілікті репозиторийден алады."},
{"question": "PyCharm дегеніміз не?", "answer": "PyCharm - Python-ды бағдарламалауға арналған интеграцияланған орта."},
{"question": "Python-ды орнату үшін дистрибутив не үшін қажет?", "answer": "Python-ды орнату үшін Python ресми сайты орнатуды жеңілдету үшін қажет."},
{"question": "'Hello, World!' жазу үшін print() функциясы не істейді?", "answer": "'Hello, World!' жазу үшін Python интерпретаторы нәтижені көрсету ретінде қызмет етеді."},
{"question": "Python-да 'Hello, World!' қалай орындалады?", "answer": "Python-да 'Hello, World!' жазылады консольда шығару арқылы орындалады."},
{"question": "Python-да мәтіндік айнымалыны қалай анықтайды?", "answer": "Python-да логикалық айнымалыны құрады өзгерту арқылы орындалады."},
{"question": "bool типті деректерді анықтау не үшін қажет?", "answer": "str типті деректерді мән беру шартты операторларда үшін қажет."},
{"question": "Python-да нақты сандық айнымалыға float мәнін анықтау қалай істейді?", "answer": "Python-да айнымалы айнымалыға str мәнін өзгерту str() арқылы істейді."},
{"question": "bool деректер типін type() арқылы қалай өзгертеді?", "answer": "str деректер типін float() арқылы тағайындайды анықтау арқылы жасалады."},
{"question": "Python-да сандық қандай шарттарды тексеруде қолданылады?", "answer": "Python-да мәтінтік бағдарламалауда математикалық операциялар үшін ретінде қолданылады."},
{"question": "input функциясы арқылы санды (int) қалай алынады?", "answer": "print функциясы арқылы мәтінді (str) шығарылады format() арқылы арқылы жасалады."},
{"question": "print функциясы қандай print(5 + 3) мысалға ие?", "answer": "input функциясы input('Атыңызды енгізіңіз: ') мысалымен көрсетіледі."},
{"question": "Python-да комментарий жазу (#) дегеніміз не?", "answer": "Python-да комментарий жазу (#) - Python-дағы бір жолдық түсініктеме құралы."},
{"question": "Комментарийді (#) кодтың ортасында қалай түсіндіреміз?", "answer": "Комментарийді (#) файлдың соңында өшіреміз сақталады арқылы орындалады."},
{"question": "Python-да функцияларда комментарийді қалай қолданамыз?", "answer": "Python-да циклдарда комментарийді түсіндіреміз сақталады арқылы орындалады."},
{"question": "Қосуды циклмен қалай орындаймыз?", "answer": "summa = 0; for i in range(5): summa += i; print(summa) нәтижесі 10."},
{"question": "Модуль операциясын рандом топтарға бөлу үшін қалай қолданамыз?", "answer": "import random; for i in range(5): print(random.randint(1, 100) % 3) топтарды рандом бөледі."},
{"question": "Python-да if операторы деген не?", "answer": "if шартты тексереді және шарт True болса, код блогын орындайды. Мысалы: if 5 > 3: print('Үлкен')."},
{"question": "if операторын функцияда қалай қолданамыз?", "answer": "def tekser(a): if a > 0: return 'Оң'; return 'Оң емес'; print(tekser(5)) нәтижесі 'Оң'."},
{"question": "and операторымен бірнеше шартты қалай тексереміз?", "answer": "a = 7; if a > 5 and a % 2 == 1: print('Шарт орындалды') нәтижесі 'Шарт орындалды'."},
{"question": "Python-да == операторы не істейді?", "answer": "== екі мәннің тең екенін тексереді. Мысалы: 5 == 5 нәтижесі True."},
{"question": "for циклы арқылы 1-ден 10-ға дейінгі сандарды қалай шығарамыз?", "answer": "for i in range(1, 11): print(i) нәтижесі 1, 2, 3, 4, 5, 6, 7, 8, 9, 10."},
{"question": "while циклы арқылы 1-ден 10-ға дейінгі сандарды қалай шығарамыз?", "answer": "i = 1; while i <= 10: print(i); i += 1 нәтижесі 1, 2, 3, 4, 5, 6, 7, 8, 9, 10."},
{"question": "while циклы арқылы сандардың көбейтіндісін қалай есептейміз?", "answer": "kop = 1; i = 1; while i <= 4: kop *= i; i += 1; print(kop) нәтижесі 24."},
{"question": "Тізімнен элементті қалай жоямыз?", "answer": "remove() әдісін қолданамыз. Мысалы: tizim = [1, 2, 3]; tizim.remove(2); print(tizim) нәтижесі [1, 3]"},
{"question": "Тізімнің элементтерін басқа тізімге қосып, орташа мәнді қалай табамыз?", "answer": "extend() және sum()/len() қолданамыз. Мысалы: tizim1 = [1, 2]; tizim2 = [3]; tizim1.extend(tizim2); print(sum(tizim1)/len(tizim1)) нәтижесі 2.0"},
{"question": "Сөздіктің ұзындығын қалай білеміз?", "answer": "len() функциясын қолданамыз. Мысалы: sozdik = {'a': 1, 'b': 2}; print(len(sozdik)) нәтижесі 2"},
{"question": "Кортеждің соңғы элементін қалай аламыз?", "answer": "Теріс индексті қолданамыз. Мысалы: kortezh = (1, 2, 3); print(kortezh[-1]) нәтижесі 3"},
{"question": "Жиынның элементтерін басқа жиынмен біріктіріп, бірінші 10-нан кіші элементті қалай аламыз?", "answer": "циклді қолданамыз. Мысалы: zhiyin1 = {12, 15}; zhiyin2 = {5}; for x in zhiyin1.union(zhiyin2): if x < 10: print(x); break нәтижесі 5"},
{"question": "Функциядан мәнді қалай қайтарамыз?", "answer": "return сөзін қолданамыз. Мысалы: def qosu(a, b): return a + b"},
{"question": "Функцияда циклді қалай қолданамыз?", "answer": "for немесе while қолданамыз. Мысалы: def sum_list(lst): s = 0; for x in lst: s += x; return s"},
{"question": "Функцияны қалай қайта анықтаймыз?", "answer": "Қайта def арқылы. Мысалы: def func(): print(1); def func(): print(2); func() нәтижесі 2"},
{"question": "Функцияда қалай кэшті тазалаймыз?", "answer": "cache_clear() қолданамыз. Мысалы: @lru_cache def func(): pass; func.cache_clear()"},
{"question": "Функцияда қалай машина оқуын қолданамыз?", "answer": "scikit-learn қолданамыз. Мысалы: from sklearn.linear_model import LinearRegression"},
{"question": "Параметрлерді қалай бөлеміз?", "answer": "Позициялық, кілттік, *args, **kwargs деп бөлеміз. Мысалы: def func(a, b, *args, **kwargs): pass"},
{"question": "Тізімнің қосындысын есептейтін функцияны қалай құрамыз?", "answer": "def tizim_qosyndy(lst): return sum(lst)"},
{"question": "Екі тізімнің қиылысуын табу функциясын қалай жазамыз?", "answer": "def qiylysu(lst1, lst2): return list(set(lst1) & set(lst2))"},
{"question": "sorted() функциясы не істейді?", "answer": "sorted() тізімді сұрыптайды және жаңа сұрыпталған тізім қайтарады."},
{"question": "Жиындарды біріктірудің операторы қандай?", "answer": "| операторы, мысалы: {1, 2} | {2, 3} нәтижесі {1, 2, 3}."},
{"question": "Файлды қосымша жазу үшін қандай режим қолданылады?", "answer": "'a' режимі, мысалы: open('file.txt', 'a')."},
{"question": "with операторы қандай протоколмен жұмыс істейді?", "answer": "Контекст менеджері протоколымен, __enter__ және __exit__ әдістері арқылы."},
{"question": "JSON файлға жазудың мысалы қандай?", "answer": "with open('data.json', 'w') as f: json.dump({'key': 'value'}, f)"},
{"question": "CSV файлға жазу кезінде жиынды жазуға бола ма?", "answer": "writer.writerows([str(x)] for x in s)"},
{"question": "math.erf() функциясы не қайтарады?", "answer": "math.erf(x) қате функциясының мәнін қайтарады."},
{"question": "from datetime import datetime, timedelta, timezone мысалы не істейді?", "answer": "datetime модулінен datetime, timedelta, timezone кластарын импорттайды."},
{"question": "import collections мысалы не істейді?", "answer": "collections модулін импорттайды, арнайы деректер құрылымдарын ұсынады."},
{"question": "Модульде класс құруға бола ма?", "answer": "Иә, class MyClass: pass деген сияқты жазамыз."},
{"question": "Модульдегі функцияларды қалай топтаймыз?", "answer": "Бір мақсатқа арналған функцияларды бір модульге жинаймыз."},
{"question": "Класс атрибуты қайда анықталады?", "answer": "Класс денесінде, әдістерден тыс."},
{"question": "MRO дегеніміз не?", "answer": "Method Resolution Order - әдістерді іздеу реті."},
{"question": "Абстракт кластың мақсаты не?", "answer": "Интерфейс анықтау және міндетті әдістерді талап ету."},
{"question": "Объект атрибутын қай жерде қолданамыз?", "answer": "Нақты объектке ғана тиесілі деректерді сақтау үшін."},
{"question": "Атрибуттың өзгеруін қалай болдырмаймыз?", "answer": "@property арқылы тек геттер анықтау."},
{"question": "Методтың нәтижесін қалай форматтаймыз?", "answer": "return f'Output: {result}' әдіс соңында."},
{"question": "Полиморфизмнің әдістерін тексерудің жолы қандай?", "answer": "isinstance(obj, Class) және әдіс нәтижелерін тексеру."},
{"question": "Мұрагерлікте атрибутты тексерудің жолы қандай?", "answer": "assert hasattr(obj, 'attr') немесе try-except."},
{"question": "try-except-те қателерді сүзудің жолы қандай?", "answer": "except SpecificError арқылы нақты қателерді ұстау."},
{"question": "Жеке ерекшелікті қалай құжаттаймыз?", "answer": "Docstring арқылы: '''Қате сипаттамасы'''"},
{"question": "Жеке ерекшелікті қалай форматтаймыз?", "answer": "def __str__(self):\n    return f'Error: {self.message}'"},
{"question": "lambda функциясының қайтару мәні қалай анықталады?", "answer": "Өрнектің нәтижесі автоматты қайтарылады."},
{"question": "lambda функциясын журналдаудың жолы қандай?", "answer": "logging.info(f'Result: {(lambda x: x+1)(5)}')"},
{"question": "Python-да анонимді функция дегеніміз не?", "answer": "Атаусыз, бір жолда анықталатын функция, әдетте lambda арқылы."},
{"question": "Анонимді функцияны қалай басқарамыз?", "answer": "Тізімде немесе словарьда сақтау."},
{"question": "filter() функциясының негізгі қызметі қандай?", "answer": "Тізімнен шартқа сәйкес элементтерді сүзеді."},
{"question": "map() функциясын қалай құжаттаймыз?", "answer": "Комментариймен: # lambda x: x*2 екі еселейді"},
{"question": "Seaborn-та графиктің атауын қалай реттейміз?", "answer": "plt.title('Атау', fontsize=14, pad=10)"},
{"question": "Matplotlib-те нүктелік графикті қалай саламыз?", "answer": "plt.scatter(x, y); plt.savefig('scatter.png')"},
{"question": "Сызықтық графикке тор қалай қосамыз?", "answer": "plt.grid(True)"},
{"question": "Тізімнің массивтен айырмашылығы неде?", "answer": "Тізім динамикалық өлшемді, массив статикалық."},
{"question": "Беллман-Форд алгоритмінің мақсаты қандай?", "answer": "Теріс салмақты графта ең қысқа жолды табу."},
{"question": "Флойд-Уоршалл алгоритмі не істейді?", "answer": "Барлық түйіндер арасындағы ең қысқа жолдарды табады."},
{"question": "Бинарлы іздеудің кеңістік күрделілігі қандай?", "answer": "O(1) итеративті, O(log n) рекурсивті."},
{"question": "Сызықтық іздеуді қалай оңтайландырамыз?", "answer": "Егер тізім сұрыпталған болса, ерте тоқтату."},
{"question": "Көпіршікті сұрыптаудың уақыт күрделілігі қандай?", "answer": "O(n²) орташа және ең нашар жағдайда, O(n) ең жақсы жағдайда."},
{"question": "Рекурсия дегеніміз не?", "answer": "Функцияның өзін-өзі шақыруы арқылы мәселені шешу әдісі."},
{"question": "Рекурсияны қашан қолданамыз?", "answer": "Мәселе кіші бөлшектерге бөлінетін болса, мысалы, ағаштар немесе графтар."},
{"question": "Инкапсуляцияның қолдану сценарийі қандай?", "answer": "Қолданушы деректерін қорғау, мысалы, парольді жасыру."},
{"question": "Абстракцияны қалай талдаймыз?", "answer": "Интерфейстің анықтығы мен мұрагер кластардың сәйкестігін тексеру."},
{"question": "Көп мұрагерлік дегеніміз не?", "answer": "Бір класс бірнеше басқа кластардан қасиеттер мен әдістерді мұрагер ету."},
{"question": "asyncio-ның тапсырмаларын қалай басқарамыз?", "answer": "asyncio.create_task() және asyncio.gather() арқылы."},
{"question": "Параллель орындауды қалай визуализациялаймыз?", "answer": "Тапсырмалардың орындалуын графикалық құралдармен бақылау."},
{"question": "SQLite-да деректерді қалай конфигурациялаймыз?", "answer": "PRAGMA командаларымен параметрлерді орнату."},
{"question": "PostgreSQL-де асинхронды сұрауларды қалай жазамыз?", "answer": "import asyncpg; conn = await asyncpg.connect('postgresql://user:pass@localhost/db')"},
{"question": "MySQL-де сұрауларды қалай тестілеуге болады?", "answer": "unittest және pymysql арқылы нәтижелерді тексеру."},
{"question": "Django-да дебагтауды қалай жүргіземіз?", "answer": "DEBUG = True settings.py ішінде және logging қолдану."},
{"question": "Flask-та API аутентификациясын қалай орнатамыз?", "answer": "Flask-JWT-Extended немесе OAuth арқылы."},
{"question": "REST API дегеніміз не?", "answer": "Веб-қызметтер үшін архитектуралық стиль, HTTP протоколдары арқылы деректер алмасуды қамтамасыз етеді."},
{"question": "GET сұрауын FastAPI-да қалай анықтаймыз?", "answer": "@app.get('/api'); async def get_data(): return {'data': 'value'}"},
{"question": "Unit тесттерді қалай оңтайландырамыз?", "answer": "Қажетсіз фикстураларды азайту және тез тесттер жазу."},
{"question": "Unit тесттерді қалай қорғаймыз?", "answer": "Сенімді фикстуралар және қателерді ұстау логикасы."},
{"question": "Pandas-ты қалай орнатамыз?", "answer": "pip install pandas командасымен."},
  {"question": "Pandas-та деректерді қалай оңтайландырамыз?", "answer": "Деректер түрлерін өзгерту: df['col'] = df['col'].astype('int32')"},
  {"question": "Pandas-та деректерді қалай қорғаймыз?", "answer": "Сезімтал деректерді маска жасау: df['col'].mask(condition)"},
  {"question": "NumPy массивін қалай құрамыз?", "answer": "import numpy as np; arr = np.array([1, 2, 3])"},
  {"question": "NumPy-да массивтің элементтерін қалай қосамыз?", "answer": "arr.sum() немесе np.sum(arr)"},
  {"question": "NumPy-да массивтің бөлігін қалай таңдаймыз?", "answer": "arr[start:end, start:end]"},
  {"question": "NumPy-да кездейсоқ сандарды қалай генерациялаймыз?", "answer": "np.random.randint(low, high, size)"},
  {"question": "NumPy-да массивтің мәндерін қалай қалыптастырамыз?", "answer": "(arr - arr.mean()) / arr.std()"},
  {"question": "NumPy-да массивтің қиылысын қалай табамыз?", "answer": "np.intersect1d(arr1, arr2)"},
  {"question": "NumPy-да массивтің нөлге жақын мәндерін қалай жоямыз?", "answer": "np.where(np.abs(arr) < 1e-10, 0, arr)"},
  {"question": "Scikit-learn-ді қалай орнатамыз?", "answer": "pip install scikit-learn командасымен."},
  {"question": "Кросс-валидацияны қалай жүргіземіз?", "answer": "from sklearn.model_selection import cross_val_score; scores = cross_val_score(model, X, y, cv=5)"},
  {"question": "Регрессия моделінің MSE-ін қалай есептейміз?", "answer": "from sklearn.metrics import mean_squared_error; mse = mean_squared_error(y_test, y_pred)"},
  {"question": "Scikit-learn-де моделді қалай сақтаймыз?", "answer": "import joblib; joblib.dump(model, 'model.pkl')"},
  {"question": "Scikit-learn-де деректерді қалай визуализациялаймыз?", "answer": "matplotlib немесе seaborn арқылы болжамдар мен деректерді графикке түсіру."},
  {"question": "Scikit-learn-де моделді қалай экспорттаймыз?", "answer": "joblib.dump(model, 'model.pkl') немесе pickle арқылы."},
  {"question": "Scikit-learn-де моделді қалай валидациялаймыз?", "answer": "cross_val_score немесе validation_curve арқылы."},
  {"question": "Python-да multithreading қалай жүзеге асырылады?", "answer": "threading модулі арқылы: import threading"},
  {"question": "Lock дегеніміз не?", "answer": "threading.Lock ағындар арасындағы ортақ ресурстарды синхрондауға арналған."},
  {"question": "Event-ті қалай қолданамыз?", "answer": "event = threading.Event(); event.set(); event.wait()"},
  {"question": "Deadlock-ты қалай болдырмаймыз?", "answer": "Құлыптарды белгілі тәртіппен алу және timeout орнату."},
  {"question": "Процесті қалай журналдаймыз?", "answer": "logging.info(f'Process {multiprocessing.current_process().name} started')"},
  {"question": "Multiprocessing-ті қалай оңтайландырамыз?", "answer": "Процестер арасындағы деректер алмасуды азайту."},
  {"question": "Процесті қалай қайталаймыз?", "answer": "multiprocessing.Pool арқылы бірнеше процесті қайта іске қосу."},
  {"question": "Numba-ны қалай орнатамыз?", "answer": "pip install numba командасымен."},
  {"question": "Numba-да NumPy массивін қалай оңтайландырамыз?", "answer": "@numba.jit декораторымен NumPy операцияларын тездету."},
  {"question": "Numba-да өнімділікті қалай профильдейміз?", "answer": "cProfile немесе time.perf_counter() арқылы."},
  {"question": "Numba-да тестілеуді қалай ұйымдастырамыз?", "answer": "pytest арқылы @numba.jit функцияларын тестілеу."},
  {"question": "Numba-да кодты қалай қорғаймыз?", "answer": "Компиляцияланған байт-кодты қолдану және шифрлау."},
  {"question": "Numba-да кодты қалай экспорттаймыз?", "answer": "Компиляцияланған функцияларды Python модульдерінде қолдану."},
  {"question": "Numba-да кодты қалай мониторинг жасаймыз?", "answer": "Grafana және time.perf_counter() арқылы бақылау."},
  {"question": "Git конфигурациясын қалай орнатамыз?", "answer": "git config --global user.name 'Name'; git config --global user.email 'email'"},
  {"question": "Git-те конфликтті қалай шешеміз?", "answer": "Конфликттік файлдарды қолмен өңдеп, git add және git commit жасау."},
  {"question": "Tag-ты GitHub-қа қалай жібереміз?", "answer": "git push origin tag_name"},
  {"question": "GitHub Actions дегеніміз не?", "answer": "GitHub-та CI/CD үшін автоматтандырылған жұмыс процестері."},
  {"question": "Git-те branch-ты қалай жоямыз?", "answer": "git branch -d branch_name (жергілікті) немесе git push origin --delete branch_name (қашықтағы)"},
  {"question": "Git-те коммитті қалай бөлшектеуге болады?", "answer": "git add -p және git commit арқылы бөлшектеу."},
  {"question": "Git-те тарихты қалай визуализациялаймыз?", "answer": "git log --graph --oneline --all"},
  {"question": "Docker образы дегеніміз не?", "answer": "Контейнер құруға арналған шаблон, қолданбаның және ортаның суреті."},
  {"question": "Образды қалай жоямыз?", "answer": "docker rmi image_name"},
  {"question": "Контейнердің логтарын қалай көреміз?", "answer": "docker logs container_id"},
  {"question": "Docker-де контейнерді қалай қайта іске қосамыз?", "answer": "docker restart container_id"},
  {"question": "Docker-де контейнерді қалай автоматтандырамыз?", "answer": "Docker Compose және CI/CD (GitHub Actions) арқылы."},
  {"question": "Docker-де образды қалай оңтайландырамыз?", "answer": "Көп сатылы құрылыс (multi-stage builds) және минималды базалық образдар қолдану."},
  {"question": "Docker-де контейнерді қалай қайталаймыз?", "answer": "docker-compose up --scale service_name=3"},
  {"question": "Workflow файлы дегеніміз не?", "answer": "GitHub Actions-те CI/CD процестерін сипаттайтын YAML файлы."},
  {"question": "Steps қалай анықталады?", "answer": "steps: - name: Step Name, run: command немесе uses: action@version."},
  {"question": "Artifact-ті қалай аламыз?", "answer": "actions/download-artifact@v3 қолдану: - uses: actions/download-artifact@v3"},
  {"question": "Node.js ортасын қалай орнатамыз?", "answer": "actions/setup-node@v3 қолдану: - uses: actions/setup-node@v3"},
  {"question": "Workflow-ты қалай профильдейміз?", "answer": "Actions қойындысындағы уақыт өлшемдерін және логтарды талдау."},
  {"question": "GitHub Actions-те retry механизмі қалай орнатылады?", "answer": "max-attempts және retry-on-timeout параметрлерімен action қолдану."},
  {"question": "GitHub Actions-те workflow-ты қалай қайта пайдаланамыз?", "answer": "workflow_call: арқылы reusable workflow құру."},
  {"question": "Веб-сайттың фронтендін қалай құрамыз?", "answer": "HTML, CSS, JavaScript және React немесе Vue.js қолдану."},
  {"question": "Веб-сайттың қауіпсіздігін қалай қамтамасыз етеміз?", "answer": "HTTPS, CSRF қорғау және SQL инъекциясына қарсы шаралар қолдану."},
  {"question": "Боттың қолданушы тәжірибесін қалай жақсартамыз?", "answer": "Қарапайым команда синтаксисі және интерактивті түймелер қосу."},
  {"question": "Деректер анализаторы үшін деректерді қалай импорттаймыз?", "answer": "pd.read_csv(), pd.read_json() немесе API арқылы."},
  {"question": "Веб-сайттың кодын қалай нұсқалаймыз?", "answer": "Git және GitHub арқылы нұсқаларды басқару."},
  {"question": "Боттың функционалдығын қалай кеңейтеміз?", "answer": "Плагиндер немесе модульдер қосу (мысалы, AI интеграциясы)."},
  {"question": "Деректер анализаторының нәтижелерін қалай бөлісеміз?", "answer": "Streamlit, Dash немесе API арқылы интерактивті есептер жасау."},
  {"question": "Docstring-ті қалай жазамыз?", "answer": "Үш қос тырнақша ішінде: \"\"\"Function description\"\"\"."},
  {"question": "Docstring-ті қалай тестілеуге болады?", "answer": "doctest модулі арқылы: python -m doctest file.py."},
  {"question": "README-ге код мысалдарын қалай қосамыз?", "answer": "```python ... ``` сияқты Markdown код блоктарын қолдану."},
  {"question": "README-ге қандай тілде жазамыз?", "answer": "Ағылшын (халықаралық жобалар) немесе мақсатты аудитория тілі."},
  {"question": "README-ді қалай теңшейміз?", "answer": "Жобаға арналған тақырыптар мен дизайн элементтерін қосу."},
  {"question": "README-ді қалай профильдейміз?", "answer": "Оқылымдылықты (readability) және құрылымды тексеру."},
  {"question": "README-ді қалай экспорттаймыз?", "answer": "GitHub Pages немесе ReadTheDocs-қа жариялау."},
  {"question": "GitHub-та open-source жобаны қалай іздейміз?", "answer": "Explore қойындысында немесе 'open source' және 'good first issue' тегтерімен іздеу."},
  {"question": "Open-source жобадағы кодты қалай тексереміз?", "answer": "git clone, орнату және тестілеу арқылы жергілікті ортада іске қосу."},
  {"question": "Open-source жобаға құжаттама қалай қосамыз?", "answer": "README, Wiki немесе Docstring-терді жаңартып, PR жасау."},
  {"question": "Open-source жобада жаңа мүмкіндікті қалай ұсынамыз?", "answer": "Issue ашып, мүмкіндікті сипаттап, қоғамдастық пікірін алу."},
  {"question": "Open-source жобадағы қауіпсіздік мәселелерін қалай хабарлаймыз?", "answer": "SECURITY.md нұсқаулары бойынша жеке хабарлама жіберу."},
  {"question": "Open-source жобаның ұзақ мерзімді дамуын қалай қамтамасыз етеміз?", "answer": "Maintainer-лерді тарту және қаржыландыру іздеу."},
  {"question": "Open-source жобадағы тәжірибені қалай бөлісеміз?", "answer": "Блог жазу, конференцияларда сөз сөйлеу және оқулықтар жасау."},
  {"question": "Docker Swarm дегеніміз не?", "answer": "Docker-дің кіріктірілген оркестрлеу құралы."},
  {"question": "Docker-де контейнерді қалай қайта пайдаланамыз?", "answer": "Образдарды Docker Hub-та сақтау және қайта қолдану."},
  {"question": "Docker-де контейнерді қалай бөлшектейміз?", "answer": "Микросервис архитектурасы және Docker Compose қолдану."},
  {"question": "Workflow файлының негізгі бөлімдері қандай?", "answer": "name, on, jobs, steps."},
  {"question": "Docker Hub-қа образды қалай жібереміз?", "answer": "docker/login-action және docker push image_name қолдану."},
  {"question": "GitHub Actions-те параллель job-тарды қалай іске қосамыз?", "answer": "jobs: job1: ..., job2: ... бір workflow-та анықтау."},
  {"question": "Pinned action нұсқасы дегеніміз не?", "answer": "Action-нің белгілі нұсқасын қолдану, мысалы, actions/checkout@v3."},
  {"question": "GitHub Actions-те қателерді қалай өңдейміз?", "answer": "continue-on-error: true немесе if: failure() қолдану."},
  {"question": "GitHub Actions-те reusable workflow қалай шақырылады?", "answer": "uses: repo/workflow.yml@branch"},
  {"question": "Telegram ботын қалай құрамыз?", "answer": "python-telegram-bot кітапханасы және BotFather арқылы токен алу."},
  {"question": "Веб-сайтқа API-ді қалай біріктіреміз?", "answer": "requests кітапханасы немесе axios арқылы API сұраулар жасау."},
  {"question": "Деректер анализаторы үшін қандай форматта есеп береміз?", "answer": "PDF, HTML немесе Jupyter Notebook арқылы."},
  {"question": "Ботты қалай масштабтаймыз?", "answer": "Микросервис архитектурасы және асинхронды тапсырмалар (Celery)."},
  {"question": "Веб-сайттың құжаттамасын қалай дайындаймыз?", "answer": "README, Sphinx немесе MkDocs қолдану."},
  {"question": "Деректер анализаторының кодын қалай оңтайландырамыз?", "answer": "Cython немесе Numba қолдану және деректер өңдеуді жеңілдету."},
  {"question": "Docstring дегеніміз не?", "answer": "Python кодында функциялар, класслар немесе модульдерді сипаттайтын арнайы пішімделген комментарий."},
  {"question": "README-ді қандай форматта жазамыз?", "answer": "Markdown (.md) форматы, себебі ол оңай оқылады және форматталады."},
  {"question": "Docstring-тің ұзындығы қандай болуы керек?", "answer": "Қысқа, бірақ функционалдылықты толық сипаттайтын, әдетте 1-10 жол."},
  {"question": "README-ге жоба нұсқасын қалай қосамыз?", "answer": "Version: 1.0.0 немесе GitHub тегтеріне сілтеме."},
  {"question": "Docstring-ті қалай тестілеуге болады?", "answer": "doctest арқылы мысалдардың дұрыстығын тексеру."},
  {"question": "README-ді қалай бөлшектейміз?", "answer": "Тақырыптар мен бөлімдерге бөлу, қосымша файлдарға сілтеме."},
  {"question": "Docstring-ті қалай топтастырамыз?", "answer": "Модульдер мен функционалдық топтар бойынша құжаттандыру."},
  {"question": "Open-source жобаға қатысуды қалай бастаймыз?", "answer": "README және CONTRIBUTING.md оқып, issue таңдап, PR жасау."},
  {"question": "Pull Request-ті қалай дұрыс пішімдейміз?", "answer": "Анық сипаттама, issue сілтемесі және тестілеу нәтижелерін қосу."},
  {"question": "Open-source жобадағы өзгерістерді қалай бақылаймыз?", "answer": "GitHub-тағы commit тарихы және changelog файлын қарау."},
  {"question": "Open-source жобадағы өз үлесімді қалай көрсетеміз?", "answer": "GitHub профиліндегі contributions және PR сілтемелерін бөлісу."},
  {"question": "Open-source жобаның қаржыландыруын қалай ұйымдастырамыз?", "answer": "GitHub Sponsors, Patreon немесе гранттар арқылы."},
  {"question": "Open-source жобаның брендін қалай құрамыз?", "answer": "Логотип, веб-сайт және әлеуметтік желілерде белсенділік."},

